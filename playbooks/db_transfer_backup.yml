---
# NOTE: while it would be easier to synchronize files directly from one server to  another,
# it appears that this would require installing a private key on one of them.
# so instead, i go through the trouble of bringing the desired file to the control,
# then pushing it to the desired destination(s)

# NOTE: can't seem to get synchronize module to keep the file ownership as advertised
# therefore, using copy when moving to destination, as this allows resetting ownership

- name: transfer backup from server(s)
  hosts: db_prod
  become: yes

  vars:
    backup_file: "anon_dump.sql"

  tasks:
    - name: transfer backup file from db_prod
      synchronize:
        src: "/home/{{ admin }}/{{ backup_file }}"
        dest: "../db_backup/{{ backup_file }}"
        mode: "pull"
        # set_remote_user: no
        use_ssh_args: yes

- name: stop app servers before restoring database
  hosts: app_not_prod
  become: yes

  tasks:
    - name: stop tomcat
      service: name=tomcat state=stopped

- name: transfer backup to other server(s)
  hosts: db_not_prod
  become: yes

  vars:
    backup_file: "anon_dump.sql"

  handlers:
    - include: handlers/restart_postgres.yml

  tasks:
    - name: instal EPEL repo
      yum: name=epel-release state=present
      become_user: root

    - name: install prereqs for ansible control of postgres
      yum: name={{ item }} state=present enablerepo=epel
      become_user: root
      with_items:
        - python-psycopg2
        - postgresql-libs

    - name: transfer backup file to destination server
      copy:
        src: "../db_backup/{{ backup_file }}"
        dest: "/home/{{ admin }}/{{ backup_file }}"
        owner: deploy
        group: deploy

    - name: restore db from backup
      include: tasks/restore_db.yml
      vars:
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        file: "{{ backup_file }}"

    - name: remove the backup file from the server
      file:
        path: "/home/{{ admin }}/{{ backup_file }}"
        state: absent
