---
- name: mock production database
  hosts: db_prod
  become: yes
  become_user: "{{ login_user }}"

  vars:
    prod_backup_local: "../db_backup/production_backup.sql"
    restore_file: "~/production_backup.sql"

  handlers:
    - include: handlers/restart_postgres.yml

  tasks:
    - name: install ansible postgres prereqs
      include: tasks/ansible_postgres_prereqs.yml

    - name: copy production backup to server
      copy:
        src: "{{ prod_backup_local }}"
        dest: "{{ restore_file }}"

    - name: production pg_hba entry
      include: tasks/pg_hba_entry.yml
      vars:
        connection_type: "local"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        auth_method: "md5"
        state: "present"

    - name: ensure admin user has necessary permissions
      include: tasks/pgpass.yml
      vars:
        admin_user: "{{ login_user }}"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        password: "{{ db_pass }}"
        state: "present"

    - name: create JIC backup
      include: tasks/backup_db.yml
      vars:
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        file: "{{ db_name }}_backup.sql"

    - name: restore database from dump
      include: tasks/restore_db.yml
      vars:
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        file: "{{ restore_file }}"

    - name: check prod db
      become_user: postgres
      shell: "psql -l"
      register: result
      failed_when: "'{{ db_name }}' not in result.stdout"
      changed_when: false

    - name: remove the backup file from the server
      file:
        path: "{{ restore_file }}"
        state: absent

    - name: remove the JIC backup from the server
      file:
        path: "{{ db_name }}_backup.sql"
        state: absent
