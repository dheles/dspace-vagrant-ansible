---
  # pg_dump --format=custom --oids --no-owner --no-acl --ignore-version -U $DB_USER $DB_NAME > $BACKUP_FILE-$NOW
  # sudo su - postgres bash -c "dropdb $DB_NAME"
  # sudo su - postgres bash -c "createdb -O $DB_USER --encoding=UNICODE $DB_NAME"
  # pg_restore -U $DB_USER -d $DB_NAME -O < $RESTORE_FILE

# - name: create timestamp
#   hosts: localhost
#   tasks:
#       - debug: var=ansible_date_time
#
#       - debug: msg="the current date is {{ ansible_date_time.date }}"
#       # register:
#       #   timestamp: "{{ ansible_date_time.iso8601 }}"

- name: setup production database
  hosts: db_prod
  become: yes
  become_user: "{{ admin }}"

  vars:
    admin: deploy
    prod_backup_local: "../db_backup/production_backup.sql"
    restore_file: "~/production_backup.sql"

  tasks:
    - name: instal EPEL repo
      yum: name=epel-release state=present
      become_user: root

    - name: install prereqs for ansible control of postgres
      yum: name={{ item }} state=present enablerepo=epel
      become_user: root
      with_items:
        - python-psycopg2
        - postgresql-libs

    - name: copy production backup to server
      copy:
        src: "{{ prod_backup_local }}"
        dest: "{{ restore_file }}"

    - name: ensure admin user has necessary permissions
      lineinfile:
        dest: ~/.pgpass
        regexp: "^localhost:\\*:{{ db_name }}:"
        line:    "localhost:*:{{ db_name }}:{{ db_user }}:{{ db_pass }}"
        state: "present"
        create: yes
        owner: "{{ admin }}"
        group: "{{ admin }}"
        mode: "0600"

    - name: backup production database # TODO: needful?
      shell: "pg_dump --format=custom --oids --no-owner --no-acl --ignore-version -U {{ db_user }} {{ db_name }} > {{ db_name }}_backup.sql"

    - name: drop production db
      postgresql_db:
        name: "{{ db_name }}"
        state: "absent"
      become_user: postgres

    - name: recreate production db
      postgresql_db:
        name: "{{ db_name }}"
        state: "present"
        owner: "{{ db_user }}"
        encoding: "UNICODE"
      become_user: postgres

    - name: restore prod from copied backup
      shell: "pg_restore -U {{ db_user }} -d {{ db_name }} -n public -O < {{ restore_file }}"

    - name: check prod db
      become_user: postgres
      shell: "psql -l"
      register: result
      failed_when: "'{{ db_name }}' not in result.stdout"
      changed_when: false

- name: anonymize production database
  hosts: db_prod
  become: yes
  become_user: "{{ admin }}"

  vars:
    admin: deploy
    anon_db: "dspace-anon"

  handlers:
    - include: handlers/restart_postgres.yml

  tasks:
    - include: tasks/pg_hba_entry.yml
      vars:
        connection_type: "local"
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        auth_method: "md5"
        state: "present"

    - include: tasks/pgpass.yml
      vars:
        admin_user: "{{ admin }}"
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        password: "{{ db_pass }}"

    - include: tasks/backup_db.yml
      vars:
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        backup_file: "production_dump.sql"

    - include: tasks/restore_db.yml
      vars:
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        restore_file: "production_dump.sql"

    - include: tasks/query_db.yml
      vars:
        admin_user: "{{ admin }}"
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        query_file: "anonymize_db.sql"

    - include: tasks/backup_db.yml
      vars:
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        backup_file: "anon_dump.sql"

    - include: tasks/pg_hba_entry.yml
      vars:
        connection_type: "local"
        database: "{{ anon_db }}"
        user: "{{ db_user }}"
        auth_method: "md5"
        state: "absent"
