---
# TODO: consider removing temp files on success

# NOTE: this is only useful in an environment were we begin with VMs
# to which we already have access as authenticated users, but which do not have
# the standard user account we prefer to use for software
# installation, configuration, and management. It is useful for establishing
# a common, consistent environment before proceeding with our other playbooks.
# Current expectation is that configuration will be modified for it,
# it will run in isolation, and then the configs will be reset before proceeding.
# The following must be set in ansible.cfg
# (unfortunately they won't be read as playbook vars)
# (don't forget to remove them before running other plays):
# remote_user = [your pre-authorized user account]
# ask_pass = True
# ask_sudo_pass = True

- name: set up for automation
  hosts: all
  gather_facts: false

  # NOTE: this will apply to all hosts. if the passwords vary, it'll be a problem
  # NOTE: comment out when rerunning after success or if adding --ask-become-pass in CLI
  # vars_prompt:
  #   - name: "ansible_become_pass"
  #     prompt: "sudo password"
  #     private: yes

  tasks:

    # - name: install prereqs
    #   yum: name="{{ item }}" state=present
    #   with_items:
    #     - python-simplejson

    # TODO: go back to 15k (15360) after testing
    - name: create ssh key for login user
      shell: >
        ssh-keygen -t rsa
        -b 2048
        -f "{{ login_user_key }}"
        -C "{{ login_user }} @ {{ project }} {{ environ }} key"
        -N "{{ login_user_passphrase }}"
      args:
        chdir: "~/.ssh"
        creates: "{{ login_user_key }}"
      delegate_to: 127.0.0.1
      run_once: true
      when: "{{ create_login_user_key }}"

    - name: gather facts
      setup:
      register: facts

    - name: report facts
      debug: var=facts

    # NOTE: need this before working with sudoers file, if SELinux is enforcing
    # TODO: test with multiple groups
    - name: install SELinux management libraries
      yum: name=libselinux-python state=present

    - name: add login user
      user:
        name: "{{ login_user }}"
        groups: "{{ login_additional_groups | default('') }}"
      become: true

    # give login user sudo (carefully)...
    - block:
      - name: copy sudoers file for editing
        copy:
          src:  "/etc/sudoers"
          dest: "/tmp/sudoers.edit"
          remote_src: true

      - name: give login user passwordless sudo
        lineinfile:
          dest: "/tmp/sudoers.edit"
          regexp: "^{{ login_user }}"
          line: "{{ login_user }} ALL=(ALL) NOPASSWD: ALL"

      - name: validate and implement edits
        copy:
          src: "/tmp/sudoers.edit"
          dest: "/etc/sudoers"
          # NOTE: needed this at least once. haven't tested to see if it always works...
          # validate: '/usr/sbin/visudo -cf %s'
          validate: 'visudo -cf %s'
          remote_src: true
          # backup: true

      become: true
    # ...end block

    - name: deploy ssh key for login user
      authorized_key:
        user: "{{ login_user }}"
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/' + login_user_key + '.pub') }}"
      become: true

    - name: add entries to ssh_config
      blockinfile:
        dest: ~/.ssh/config
        marker: "# {mark} {{ inventory_hostname }} {{ environ }}"
        block: |
          {{ item }}
      with_template: templates/ssh_config.j2
      delegate_to: 127.0.0.1

# TODO: using delegate_to and incorporating into loop above may be cleaner
# http://docs.ansible.com/ansible/playbooks_delegation.html
# - name: add entries to ssh_config
#   hosts: localhost
#
#   tasks:
#     - name: add entries to ssh_config
#       blockinfile:
#         dest: ~/.ssh/config
#         marker: "# {mark} dspace prod"
#         block: |
#           {{ item }}
#       with_template: templates/ssh_config.j2
